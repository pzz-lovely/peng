    映射就是用来存放键值对
    java类库提供了两个通用的实现:hashMap和TreeMap。这两个类都实现了Map接口。
    散列映射对键进行散列
    树映射用键的整体顺序对元素进行排序，并将其组织成搜索树。
    散列或比较函数只能作用于键。
    映射视图 键集、值集合、键/值对

    java.util.Map  interface<K,V>
    V get(Object key)
    获取与键对应的值；返回与键对应的对象，如果在映射中没有这个对象则返回null
    V put(K key,V value)
    将键与对应的值关系插入到映射中
    void putAll(Map<? extends K,? extends V> entries)
    将给定映射中的索引条目添加到这个映射中
    boolean containsValue(Object value)
    如果映射中已经有这个键，返回true
    Set<Map.Entry<K,V>> entrySet()
    返回Map.Entry对象(映射中的键/值对)的一个集视图。可以从这个集中删除元素，它们将映射中删除，但是不能增加任何元素。
    Set<K> keySet()
    返回映射中所有键的一个集视图。可以从这个 集中删除元素，键和相关联的值将从映射中删除，但是不能增加任何元素
    Collection<V> values()
    返回映射中所有的值的一个集合视图。可以从这个集合中删除元素，所删除的值以及相应的键将映射中删除，不过不能增加任何元素。

    default不常用
    default void forEach(BiConsumer<? super K,? super V> action)
    对这个映射中的索引键/值对应这个动作
    default V merge(K key,V value,BiFunction<? super V,? super V,? extends V> remappingFunction)
    如果Key与一个非null值v关联，将函数 应用到v和value，将key于结果关联，或者如果结果为null，则删除这个键。否则，将key与value关联，返回get(key)



    java.util.HashMap<K,V> implements Map
        HashMap()
        HashMap(int initialCapacity)
        HashMap(int initialCapacity,float loadFactor)
        用给定的容量和装填因子构造一个空散列映射(0.0~1.0)。默认装填因子是 0.75

    java.util.TreeMap<K,V> implements Map
    TreeMap()
    为实现Comparable接口的键构造一个空的树映射
    TreeMap(Comparator<? super K> c)
    构建一个树映射，并使用一个指定的比较器进行排序
    TreeMap(Map<? extends K,? extends V> entries)
    构造一个树映射，并将某个映射中的所有条目添加到树映射中
    TreeMap(SortedMap<? extends K,? extends V> entries)
    构造一个树映射，将某个有序映射中的所有条目添加到树映射中，并使用给定的有序映射器想的比较器

    java.util.SortedMap<K,V>
    Comparator<? super K> comparator()
    返回对键进行的排序的比较器。如果键是用comparable接口的compareTo方法进行比较的，返回Null
    K firstKey()
    K lastKey()
    最小和最大 元素

    java.util.Entry<K,V>
    K getKey()
    V getValue()
    返回这一条目的键或值
    V setValue(V newValue)
    将相关映射的值改为新值，并返回原来的值。


    WeakHashMap使用弱引用(weak references)保存键。对于散列键，WeakReference对象将引用保存到另一个对象中。
    对于这种类型的对象，垃圾回收器用一种特有的方式进行处理。通常，如果垃圾回收器发现某个特定的对象已经没有他人引用了，就将其回收。
    然而，如果某个对象只能有WeakHashMap引用，垃圾回收期仍然回收它，但要将引用这个对象的弱引用放入队列中。
    WeakHashMap将周期性地检查队列，以便找出新添加的弱引用。
    一个弱引用进入队列意味着这个键不在被他人使用，并且已经被收集起来。
    于是WeakHashMap删除对应的条目